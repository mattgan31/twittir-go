basePath: /api/
definitions:
  dto.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  dto.FormatUsers:
    properties:
      ProfilePicture:
        type: string
      fullname:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  dto.ProfileResponse:
    properties:
      FullName:
        type: string
      ProfilePicture:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  dto.RegisterSuccess:
    properties:
      email:
        type: string
      fullname:
        type: string
      id:
        type: integer
    type: object
  dto.SignInSuccess:
    properties:
      token:
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      data: {}
      status:
        type: string
    type: object
host: localhost:3001
info:
  contact: {}
  description: This is API for Twittir Go (Personal Project) using Golang (gin) and
    GORM
  title: Twittir Go API
  version: "1.0"
paths:
  /api/login:
    post:
      consumes:
      - application/json
      description: Logs in a user and returns a token
      parameters:
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.SignInSuccess'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login user
      tags:
      - Auth
  /api/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Email
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Fullname
        in: body
        name: fullname
        required: true
        schema:
          type: string
      - description: Username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Password
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: Password verification
        in: body
        name: password_verify
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.RegisterSuccess'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register user
      tags:
      - Auth
  /api/search:
    get:
      consumes:
      - application/json
      description: Search user by username with query parameter
      parameters:
      - description: Username to search for
        in: query
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Users successfully retrieved
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.FormatUsers'
              type: object
        "400":
          description: Invalid request or missing parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Search user by username
      tags:
      - Auth
  /api/users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve the user profile details by the specified user ID
      produces:
      - application/json
      responses:
        "200":
          description: User profile successfully retrieved
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProfileResponse'
              type: object
        "400":
          description: Invalid request or missing parameters
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Show user by ID
      tags:
      - Auth
  /api/users/profile:
    get:
      consumes:
      - application/json
      description: Show user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/dto.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProfileResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Show Profile user
      tags:
      - Auth
swagger: "2.0"
